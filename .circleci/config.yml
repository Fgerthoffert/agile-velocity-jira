# Instructions from: https://circleci.com/blog/automate-releases-from-pipelines-using-infrastructure-as-code/
# Run
---
version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME_API: fgerthoffert/jav-api
      IMAGE_NAME_CLI: fgerthoffert/jav-cli
      IMAGE_NAME_UI: fgerthoffert/jav-ui
    docker:
      - image: circleci/buildpack-deps:stretch

jobs:
  cli-node-latest: &cli-test
    docker:
      - image: node:latest
    working_directory: ~/cli-ci
    steps:
      - checkout
      - restore_cache: &cli-restore_cache
          keys:
            - v1-npm-cli-{{checksum ".circleci/config.yml"}}-{{checksum "cli/package-lock.json"}}
            - v1-npm-cli-{{checksum ".circleci/config.yml"}}
      - run:
          name: Install dependencies
          command: cd cli && npm install
      - run:
          name: Linting
          command: cd cli && npm run lint
      - run:
          name: Display version
          command: ./cli/bin/run --version
      - run:
          name: Display help
          command: ./cli/bin/run --help
      - run:
          name: Init app
          command: ./cli/bin/run init
      - persist_to_workspace:
          root: .
          paths: .

  cli-cache:
    <<: *cli-test
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: cd cli && npm install
      - save_cache:
          key: v1-npm-cli-{{checksum ".circleci/config.yml"}}-{{checksum "cli/package-lock.json"}}
          paths:
            - ~/cli-ci/node_modules
            - ~/.npm
            - /usr/local/lib/node_modules

  api-node-latest: &api-test
    docker:
      - image: node:latest
    working_directory: ~/api-ci
    steps:
      - checkout
      - restore_cache: &api-restore_cache
          keys:
            - v1-npm-api-{{checksum ".circleci/config.yml"}}-{{checksum "api/package-lock.json"}}
            - v1-npm-api-{{checksum ".circleci/config.yml"}}
      - run:
          name: Install dependencies
          command: cd api && npm install
      - run:
          name: Linting
          command: cd api && npm run lint

  api-cache:
    <<: *api-test
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: cd api && npm install
      - save_cache:
          key: v1-npm-api-{{checksum ".circleci/config.yml"}}-{{checksum "api/package-lock.json"}}
          paths:
            - ~/api-ci/node_modules
            - ~/.npm
            - /usr/local/lib/node_modules

  ui-node-latest: &ui-test
    docker:
      - image: node:latest
    working_directory: ~/ui-ci
    steps:
      - checkout
      - restore_cache: &ui-restore_cache
          keys:
            - v1-npm-ui-{{checksum ".circleci/config.yml"}}-{{checksum "ui/package-lock.json"}}
            - v1-npm-ui-{{checksum ".circleci/config.yml"}}
      - run:
          name: Install dependencies
          command: cd ui && npm install
      - run:
          name: Linting
          command: cd ui && npm run lint

  ui-cache:
    <<: *ui-test
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: cd ui && npm install
      - save_cache:
          key: v1-npm-ui-{{checksum ".circleci/config.yml"}}-{{checksum "ui/package-lock.json"}}
          paths:
            - ~/ui-ci/node_modules
            - ~/.npm
            - /usr/local/lib/node_modules

  # Publish a new version of the cli to NPM
  npm-publish:
    docker:
      - image: node:latest
    working_directory: ~/cli-ci
    steps:
      - checkout
      #      - attach_workspace:
      #          at: /tmp/workspace
      - run:
          name: Install dependencies
          command: cd cli && npm install
      - run:
          name: Install Typescript
          command: npm -g install typescript@4.4.4
      - run:
          name: Install oclif-dev
          command: npm -g install @oclif/dev-cli @oclif/help
      - run:
          name: Authenticate with NPM registry
          command: echo "//registry.npmjs.org/:_authToken=$NPM_TOKEN" > cli/.npmrc
      - run:
          name: Updating NPM version with GitHub tag
          command: |
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            echo "Image tag is: $IMAGE_TAG"
            cd cli && npm version $IMAGE_TAG
      - run:
          name: Build the typescript app
          command: cd cli && npx tsc -b
      - run:
          name: Generate the oclif manifest
          command: cd cli && oclif-dev manifest
      - run:
          name: Ls cli content
          command: ls -lah cli/
      - run:
          name: Publish to NPM registry
          command: cd cli && npm publish

  # Test the package that was just published to npm
  npm-test:
    docker:
      - image: node:latest
    working_directory: ~/cli-npm
    steps:
      - run:
          name: Install
          command: npm install -g jira-agile-velocity
      - run:
          name: Display version
          command: jav --version
      - run:
          name: Display help
          command: jav --help

  # Build all three docker images
  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker:
          version: 19.03.13
      - run:
          name: Build API Docker Image
          command: cd api && docker build -t $IMAGE_NAME_API:latest .
      - run:
          name: Archive API Docker image
          command: docker save -o image_api.tar $IMAGE_NAME_API
      - run:
          name: Build UI Docker Image
          command: cd ui && docker build -t $IMAGE_NAME_UI:latest .
      - run:
          name: Archive UI Docker image
          command: docker save -o image_ui.tar $IMAGE_NAME_UI
      - run:
          name: Build CLI Docker Image
          command: cd cli && docker build -t $IMAGE_NAME_CLI:latest .
      - run:
          name: Archive CLI Docker image
          command: docker save -o image_cli.tar $IMAGE_NAME_CLI
      - persist_to_workspace:
          root: .
          paths:
            - ./image_api.tar
            - ./image_ui.tar
            - ./image_cli.tar

  # Publish all three docker images
  docker-publish:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived API Docker image
          command: docker load -i /tmp/workspace/image_api.tar
      - run:
          name: Publish API Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_USERNAME"
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            echo "Image tag is: $IMAGE_TAG"
            docker tag $IMAGE_NAME_API:latest $IMAGE_NAME_API:$IMAGE_TAG
            echo "Tagged the image"
            docker push $IMAGE_NAME_API:latest
            echo "Pushed latest"
            docker push $IMAGE_NAME_API:$IMAGE_TAG
            echo "Pushed tag"
      - run:
          name: Load archived UI Docker image
          command: docker load -i /tmp/workspace/image_ui.tar
      - run:
          name: Publish UI Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_USERNAME"
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            echo "Image tag is: $IMAGE_TAG"
            docker tag $IMAGE_NAME_UI:latest $IMAGE_NAME_UI:$IMAGE_TAG
            echo "Tagged the image"
            docker push $IMAGE_NAME_UI:latest
            echo "Pushed latest"
            docker push $IMAGE_NAME_UI:$IMAGE_TAG
            echo "Pushed tag"
      - run:
          name: Load archived CLI Docker image
          command: docker load -i /tmp/workspace/image_cli.tar
      - run:
          name: Publish CLI Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_USERNAME"
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG=${CIRCLE_TAG/v/''}
            echo "Image tag is: $IMAGE_TAG"
            docker tag $IMAGE_NAME_CLI:latest $IMAGE_NAME_CLI:$IMAGE_TAG
            echo "Tagged the image"
            docker push $IMAGE_NAME_CLI:latest
            echo "Pushed latest"
            docker push $IMAGE_NAME_CLI:$IMAGE_TAG
            echo "Pushed tag"

workflows:
  version: 2
  build-npm-from-tags:
    jobs:
      - npm-publish:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - npm-test:
          requires:
            - npm-publish
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  build-docker-from-tags:
    jobs:
      - docker-build:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - docker-publish:
          requires:
            - docker-build
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
  lint-and-test:
    jobs:
      - cli-node-latest
      - cli-cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - api-node-latest
      - api-cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
      - ui-node-latest
      - ui-cache:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
